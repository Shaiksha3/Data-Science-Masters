Q1. Create a vehicle class with an init method having instance variables as name_of_vehicle, max_speed
`   and average_of_vehicle.

ans:


class Vehicle:
    def __init__(self, name_of_vehicle, max_speed, average_of_vehicle):
        self.name_of_vehicle = name_of_vehicle
        self.max_speed = max_speed
        self.average_of_vehicle = average_of_vehicle
    
    def accelerate(self, speed):
        print(f"{self.name_of_vehicle} is accelerating to {speed} km/h")
    
    def brake(self):
        print(f"{self.name_of_vehicle} is braking")
        
car = Vehicle("Car", 120, 60)

car.accelerate(80) # Output: "Car is accelerating to 80 km/h"
car.brake() # Output: "Car is braking"



Q2. Create a child class car from the vehicle class created in Que 1, which will inherit the vehicle class.
Create a method named seating_capacity which takes capacity as an argument and returns the name of
the vehicle and its seating capacity.


class Car(Vehicle):
    def __init__(self, name_of_vehicle, max_speed, average_of_vehicle):
        super().__init__(name_of_vehicle, max_speed, average_of_vehicle)
    
    def seating_capacity(self, capacity):
        return f"{self.name_of_vehicle} has a seating capacity of {capacity} passengers."

car = Car("Toyota Corolla", 180, 80)
print(car.seating_capacity(5)) # Output: "Toyota Corolla has a seating capacity of 5 passengers."



Q3. What is multiple inheritance? Write a python code to demonstrate multiple inheritance.


class Animal:
    def __init__(self, name):
        self.name = name
    
    def speak(self):
        print(f"{self.name} is speaking.")
        
class Flyable:
    def fly(self):
        print("I am flying.")
        
class Bird(Animal, Flyable):
    def __init__(self, name):
        super().__init__(name)
    
    def fly(self):
        print(f"{self.name} is flying.")
        
bird = Bird("Sparrow")
bird.speak() # Output: "Sparrow is speaking."
bird.fly() # Output: "Sparrow is flying."



Q4.What are getter and setter in python? Create a class and create a getter and a setter method in this
class.

class Person:
    def __init__(self, name):
        self._name = name
    
    @property
    def name(self):
        return self._name
    
    @name.setter
    def name(self, value):
        self._name = value
    
person = Person("John")
print(person.name) # Output: "John"
person.name = "Jane"
print(person.name) # Output: "Jane"



Q5.What is method overriding in python? Write a python code to demonstrate method overriding.


class Animal:
    def speak(self):
        print("The animal is speaking.")

class Dog(Animal):
    def speak(self):
        print("The dog is barking.")

animal = Animal()
animal.speak() # Output: "The animal is speaking."

dog = Dog()
dog.speak() # Output: "The dog is barking."
